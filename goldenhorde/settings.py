"""
Django settings for goldenhorde project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print("BASE_DIR", BASE_DIR)
env = environ.Env()


print("DJANGO_ENV", os.environ.get("DJANGO_ENV"))

# Only read .env file if DJANGO_ENV is not 'production'
if os.environ.get("DJANGO_ENV", "development") == "development":
    # This will load .env from BASE_DIR in development
    environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY", default='django-insecure-#2_7k2-pi4*w8tu(b=_de9g_w2*7m08&j(x^y-$u6k7m$4e^1w')
print("SECRET_KEY", SECRET_KEY)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", default="True")

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',

    '192.168.1.78',
    '192.168.1.79',

    '192.168.1.100',
    '192.168.1.101',

    '194.60.231.201',

    'golden-horde.ir',
    'django.golden-horde.ir',
    'goldenhorde.liara.run',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'https://localhost:3000',

    'http://192.168.1.78:3000',
    'https://192.168.1.78:3000',
    'http://192.168.1.79:3000',
    'https://192.168.1.79:3000',

    'http://192.168.1.100:3000',
    'https://192.168.1.100:3000',
    'http://192.168.1.101:3000',
    'https://192.168.1.101:3000',

    'http://194.60.231.201:3000',
    'https://194.60.231.201:3000',

    'http://golden-horde.ir',
    'https://golden-horde.ir',

    'https://goldenhorde.liara.run',
]

CSRF_TRUSTED_ORIGINS = ["https://django.golden-horde.ir"]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',

    'hordes',
    'membership',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'goldenhorde.middlewares.QueryCountMiddleware',
]

ROOT_URLCONF = 'goldenhorde.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'goldenhorde.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# if env('USE_CLOUD_DB', default="False") == 'True':
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME', default='goldenhorde'),
        'USER': env('DB_USER', default='postgres'),
        'PASSWORD': env('DB_PASSWORD', default='qwer123456'),
        'HOST': env('DB_HOST', default='localhost'),
        'PORT': env('DB_PORT', default='5432'),
    }
}

# else:
#     DATABASES = {
#         'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#         }
#     }
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env("EMAIL_HOST", default="EMAIL_HOST is not set")
EMAIL_PORT = env("EMAIL_PORT", default="EMAIL_PORT is not set")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="EMAIL_HOST_USER is not set")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD",
                          default="EMAIL_HOST_PASSWORD is not set")
EMAIL_USE_TLS = True

# WebSocket Cache Configuration
WS_CACHE_TTL = env.int('WS_CACHE_TTL', default=3600)  # 1 hour default
WS_CACHE_EXTENDED_TTL = env.int('WS_CACHE_EXTENDED_TTL', default=86400)  # 24 hours for long connections

ENVIRONMENT = env('ENVIRONMENT', default='development')
if ENVIRONMENT == 'production':
    STATIC_URL = 'static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


if ENVIRONMENT == 'development':
# if False:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
            "TIMEOUT": 3600,  # 1 hour default timeout
            "OPTIONS": {
                "MAX_ENTRIES": 1000,  # Maximum number of entries in cache
            }
        }
    }
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }
else:
    redis_url = env("REDIS_URL", default="redis://127.0.0.1:6379")
    cache_db_number = env("CACHE_DB_NUMBER", default="0")
    cache_redis_host = redis_url + "/" + cache_db_number
    print("CACHE_REDIS_HOST: ", cache_redis_host)

    # Cache settings
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": cache_redis_host,
            "TIMEOUT": 3600,  # 1 hour default timeout
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_KWARGS": {
                    "max_connections": 50,
                    "retry_on_timeout": True,
                },
                "SOCKET_CONNECT_TIMEOUT": 5,  # 5 seconds
                "SOCKET_TIMEOUT": 5,  # 5 seconds
                "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
                "IGNORE_EXCEPTIONS": True,  # Don't crash if Redis is down
            }
        }
    }
    CACHE_TTL = 3600 * 24

    channel_layers_db_number = env("CHANNEL_LAYERS_DB_NUMBER", default="1")
    channel_layers_redist_host = redis_url + "/" + channel_layers_db_number
    print("CHANNEL_LAYERS_REDIS_HOST: ", channel_layers_redist_host)

    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [channel_layers_redist_host],
                "capacity": 1500,  # Maximum number of messages that can be in a channel layer
                "expiry": 3600,  # Message expiry in seconds
                "group_expiry": 86400,  # Group expiry in seconds (24 hours)
                "channel_capacity": {
                    "http.request": 100,
                    "http.response!*": 100,
                    "websocket.send!*": 100,
                },
            },
        },
    }
